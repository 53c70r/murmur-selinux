
## <summary>policy for murmur</summary>

########################################
## <summary>
##	Execute murmur_exec_t in the murmur domain.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`murmur_domtrans',`
	gen_require(`
		type murmur_t, murmur_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, murmur_exec_t, murmur_t)
')

######################################
## <summary>
##	Execute murmur in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`murmur_exec',`
	gen_require(`
		type murmur_exec_t;
	')

	corecmd_search_bin($1)
	can_exec($1, murmur_exec_t)
')

########################################
## <summary>
##	Search murmur lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`murmur_search_lib',`
	gen_require(`
		type murmur_var_lib_t;
	')

	allow $1 murmur_var_lib_t:dir search_dir_perms;
	files_search_var_lib($1)
')

########################################
## <summary>
##	Read murmur lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`murmur_read_lib_files',`
	gen_require(`
		type murmur_var_lib_t;
	')

	files_search_var_lib($1)
	read_files_pattern($1, murmur_var_lib_t, murmur_var_lib_t)
')

########################################
## <summary>
##	Manage murmur lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`murmur_manage_lib_files',`
	gen_require(`
		type murmur_var_lib_t;
	')

	files_search_var_lib($1)
	manage_files_pattern($1, murmur_var_lib_t, murmur_var_lib_t)
')

########################################
## <summary>
##	Manage murmur lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`murmur_manage_lib_dirs',`
	gen_require(`
		type murmur_var_lib_t;
	')

	files_search_var_lib($1)
	manage_dirs_pattern($1, murmur_var_lib_t, murmur_var_lib_t)
')


########################################
## <summary>
##	All of the rules required to administrate
##	an murmur environment
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`murmur_admin',`
	gen_require(`
		type murmur_t;
		type murmur_var_lib_t;
	')

	allow $1 murmur_t:process { signal_perms };
	ps_process_pattern($1, murmur_t)

    tunable_policy(`deny_ptrace',`',`
        allow $1 murmur_t:process ptrace;
    ')

	files_search_var_lib($1)
	admin_pattern($1, murmur_var_lib_t)
	optional_policy(`
		systemd_passwd_agent_exec($1)
		systemd_read_fifo_file_passwd_run($1)
	')
')
